#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Stepper.h>
#include <FirebaseESP32.h>
#include <WiFi.h>
#include <NTPClient.h>
#include <WiFiUdp.h>
#include <RTClib.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
#define BUZZER_PIN 5
#define IR_SENSOR_PIN 4
#define STEPS_PER_REV 200
Stepper stepper(STEPS_PER_REV, 11, 12, 13, 14);  // Stepper motor pins
#define FIREBASE_HOST "*****************************"
#define FIREBASE_AUTH "***************************************"
#define WIFI_SSID "ABCD"
#define WIFI_PASSWORD "***********"
FirebaseData fbdo;
FirebaseConfig config;
FirebaseAuth auth;
RTC_DS3231 rtc;
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org", 19800, 60000);

String prescriptionID = "";
String doseTimes[5]; 
int doseCount = 0;
String lastTakenTime = "--:--";
String phoneNumber = "";
String currentTime;

void setup() {
    Serial.begin(115200);
    Wire.begin();
    if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
        Serial.println("SSD1306 allocation failed");
        while (1);
    }
    display.clearDisplay();
    display.display();
    WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
    Serial.print("Connecting to WiFi");
    while (WiFi.status() != WL_CONNECTED) {
        Serial.print(".");
        delay(1000);
    }
    Serial.println(" Connected!");

    config.host = FIREBASE_HOST;
    config.signer.tokens.legacy_token = FIREBASE_AUTH;
    Firebase.begin(&config, &auth);
    Firebase.reconnectWiFi(true);
    if (!rtc.begin()) {
        Serial.println("Couldn't find RTC");
        while (1);
    }
    if (rtc.lostPower()) {
        Serial.println("RTC lost power! Syncing time...");
        timeClient.begin();
        timeClient.update();
        rtc.adjust(DateTime(timeClient.getEpochTime()));
    }

    pinMode(BUZZER_PIN, OUTPUT);;
    stepper.setSpeed(10);
    fetchLatestPrescriptionData();
    Serial.print("Initial IR Sensor State: ");
    Serial.println(digitalRead(IR_SENSOR_PIN));
}

void loop() {
    timeClient.update();
    DateTime now = rtc.now();
    currentTime = formatTime(now.hour(), now.minute());
    Serial.println("âŒš Current Time: " + currentTime);

    static unsigned long lastFetchTime = 0;
    if (millis() - lastFetchTime >= 5000) {
        fetchLatestPrescriptionData();
        lastFetchTime = millis();
    }
    bool pillTime = false;
    for (int i = 0; i < doseCount; i++) {
        if (currentTime == doseTimes[i]) {
            pillTime = true;
            takePillProcedure(i); 
            break;
        }
    }

    if (!pillTime) {
        displayInfo(); 
    }

    delay(1000);
}

void fetchLatestPrescriptionData() {
    if (Firebase.getJSON(fbdo, "/prescriptions")) {
        FirebaseJson &json = fbdo.jsonObject();
        String key, value;
        int type;
        size_t index = 0;

        json.iteratorBegin();
        while (json.iteratorGet(index, type, key, value) == 0) {
            prescriptionID = key;
            index++;
        }
        json.iteratorEnd();
        Serial.println("âœ… Latest Prescription ID: " + prescriptionID);
    }
    
    doseCount = 0;
    for (int i = 0; i < 5; i++) {
        String path = "/prescriptions/" + prescriptionID + "/doseTimes/" + String(i);
        if (Firebase.getString(fbdo, path)) {
            doseTimes[i] = fbdo.stringData();
            doseCount++;
            Serial.println("ðŸ“… Next Pill Time: " + doseTimes[i]);
        }
    }
    
    String path = "/prescriptions/" + prescriptionID + "/lastTaken";
    if (Firebase.getString(fbdo, path)) {
        lastTakenTime = fbdo.stringData();
        Serial.println("ðŸ•’ Last Taken Time: " + lastTakenTime);
    }
    
    if (Firebase.getString(fbdo, "/prescriptions/" + prescriptionID + "/contactNumber")) {
        phoneNumber = fbdo.stringData();
        Serial.println("ðŸ“ž Caregiver Contact: " + phoneNumber);
    }
}

void takePillProcedure(int doseIndex) {
    Serial.println("ðŸ”” Pill time! Alerting user...");
    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(WHITE);
    display.setCursor(0, 0);
    display.println("Time to take pill");
    display.println("Time: " + currentTime);
    display.println("Dose: " + doseTimes[doseIndex]);
    display.display();

    bool pillTaken = false;
    unsigned long startTime = millis();
    tone(BUZZER_PIN, 1000); // Start continuous buzzer

    while (millis() - startTime < 180000) {  
        int irState = digitalRead(IR_SENSOR_PIN);
        Serial.print("IR Sensor State: "); // Debug output
        Serial.println(irState);

        if (irState == HIGH) { 
            if (digitalRead(IR_SENSOR_PIN) == HIGH) { 
                pillTaken = true;
                break;
            }
        }
    }
    noTone(BUZZER_PIN); 

    if (pillTaken) {
        Serial.println("âœ… Pill Taken!");
        display.clearDisplay();
        display.setCursor(0, 0);
        display.println("Pill Taken");
        display.println("Time: " + currentTime);
        display.display();
        Firebase.setString(fbdo, "/prescriptions/" + prescriptionID + "/lastTaken", currentTime);
        stepper.step(28); // Move to next compartment
    } else {
        Serial.println("ðŸš¨ Pill Not Taken!");
        display.clearDisplay();
        display.setCursor(0, 0);
        display.println("Pill Missed");
        display.println("Time: " + currentTime)
        Firebase.setString(fbdo, "/prescriptions/" + prescriptionID + "/lastTaken", "Not taken at " + currentTime);
        notifyCaregiver(); // Notify caregiver of missed dose
    }

    delay(5000);
}

void notifyCaregiver() {
    if (phoneNumber != "") {
        Serial.println("ðŸ“© Sending SMS to: " + phoneNumber);
        Firebase.pushString(fbdo, "/notifications", "Patient missed pill at " + currentTime);
    }
}

String formatTime(int hour, int minute) {
    String h = (hour < 10) ? "0" + String(hour) : String(hour);
    String m = (minute < 10) ? "0" + String(minute) : String(minute);
    return h + ":" + m;
}

void displayInfo() {
    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(WHITE);
    display.setCursor(0, 0);
    display.println("Smart Pill Dispenser");
    display.println("Time: " + currentTime);
    for (int i = 0; i < doseCount; i++) {
        display.println("Dose: " + doseTimes[i]);
    }
    display.println("Last Taken: " + lastTakenTime);
    display.display();
}
